package mapreduce;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;

import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import mapreduce.LanguageLetterMapper.MapCounters;
import mapreduce.LanguageLetterReducer.ReducerCounters;

public class LetterFrequency extends Configured implements Tool {
	
	 public static void main(String[] args) throws Exception {
		    int exitFlag = ToolRunner.run(new LetterFrequency(), args);
		    System.exit(exitFlag);
		  }

	@Override
	public int run(String[] args) throws Exception {
		if (args.length != 2) {
			System.err.println("Usage: LetterFrequency <input path> <output path>");
			System.exit(-1); 
		}

		// Job 1
		Configuration conf = new Configuration();
		
		// delete Output Directory if exists
		FileSystem fs = FileSystem.get(conf);
		if(fs.exists(new Path(args[1]))) {
			fs.delete(new Path(args[1]),true);
		}
		
		Job job1 = Job.getInstance(conf, "LangLetterSum");
		job1.setJarByClass(LetterFrequency.class);
		
		FileInputFormat.addInputPath(job1, new Path(args[0]));	
		
		job1.setMapperClass(LanguageLetterMapper.class);
		
		//job1.setNumReduceTasks(0);
		
		// the combiner can use the same Reducer class as it does not perform any different calculations
		job1.setCombinerClass(LanguageLetterReducer.class); // using reducer as combiner
	    job1.setReducerClass(LanguageLetterReducer.class);
		
	    job1.setOutputKeyClass(Text.class);
	    job1.setOutputValueClass(DoubleWritable.class);

		job1.setOutputFormatClass(SequenceFileOutputFormat.class);
		SequenceFileOutputFormat.setOutputPath(job1, new Path(args[0] + "/temp"));
		
		job1.waitForCompletion(true);

		// Job 2

		Configuration conf2 = new Configuration();
		Job job2 = Job.getInstance(conf2, "LangLetterAverage");
		job2.setJarByClass(LetterFrequency.class);

		FileInputFormat.addInputPath(job2, new Path(args[0] + "/temp"));
		job2.setInputFormatClass(SequenceFileInputFormat.class);

		// Identity Mapper - just to pass forward the key/values generated by the first job
		// no need to be implemented
		
		// passing the correct key/value class
		// otherwise it will be by default LongWritable by Keys
		job2.setMapOutputKeyClass(Text.class);
		job2.setMapOutputValueClass(DoubleWritable.class);

		//job2.setNumReduceTasks(0);
		job2.setReducerClass(AverageReducer.class);

		job2.setOutputKeyClass(Text.class);
		job2.setOutputValueClass(DoubleWritable.class);

		job2.setOutputFormatClass(TextOutputFormat.class);
		FileOutputFormat.setOutputPath(job2, new Path(args[1]));
		
		job2.waitForCompletion(true);

		// cleaning TEMP file
		cleanupFile(new Path(args[0] + "/temp"));
		
		
		Counter mapperCounter = job1.getCounters().findCounter(MapCounters.MAP_RECORDS);
		Counter filesCounter = job1.getCounters().findCounter(MapCounters.FILES);
		Counter reducerCounter = job1.getCounters().findCounter(ReducerCounters.REDUCER_RECORDS);
		
		System.out.println("Total number of records processed in Mapper: " + mapperCounter.getValue());
		System.out.println("Total files processed in MapReduce: " + filesCounter.getValue());
		System.out.println("Total number of records processed in Reducer: " + reducerCounter.getValue());

		return(0);

	}
	
	private void cleanupFile(Path file)
	{
	  try {
		  Configuration confFile = new Configuration();
		  FileSystem fileSystem = FileSystem.get(confFile);
		  
		  if (!fileSystem.delete(file, true)) {
			fileSystem.close();
	        throw new IOException("Deleting temporary files in " + file + " was unsuccessful");
	      }

		  fileSystem.close();

	  }
	  catch (IOException e) {
		  System.out.println("Failed to delete temporary file: " + file);
	  }
	}

}
